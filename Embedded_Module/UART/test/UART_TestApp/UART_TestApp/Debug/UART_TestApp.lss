
UART_TestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083f  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d1  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include "STD_TYPES.h"
#include "UART.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Buf = 'M';
  76:	8d e4       	ldi	r24, 0x4D	; 77
  78:	89 83       	std	Y+1, r24	; 0x01
	
	/* NOT recommended to choose a baudrate with error greater than 2.1%. Refer to data sheet for more info */
	UART_enuInit(F_CPU, 9600);
  7a:	20 e8       	ldi	r18, 0x80	; 128
  7c:	35 e2       	ldi	r19, 0x25	; 37
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	72 e1       	ldi	r23, 0x12	; 18
  86:	8a e7       	ldi	r24, 0x7A	; 122
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 54 00 	call	0xa8	; 0xa8 <UART_enuInit>
    while (1) 
    {
		UART_enuReceive(&Loc_u8Buf, 1U);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	ce 01       	movw	r24, r28
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_enuReceive>
		UART_enuTransmit(&Loc_u8Buf, 1U);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	ce 01       	movw	r24, r28
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_enuTransmit>
  a6:	f3 cf       	rjmp	.-26     	; 0x8e <main+0x22>

000000a8 <UART_enuInit>:
 * 
 * @param[in] Copy_u32Baudrate Transmitting and receiving baudrate(bits/s)
 * @return UART_enuErrStatus_t Error status of the function return
 */
UART_enuErrStatus_t UART_enuInit(u32 Copy_u32SysClk, u32 Copy_u32Baudrate)
{
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;

    if (Copy_u32SysClk > 16000000UL || Copy_u32SysClk < 1000000UL)
  b0:	6b 01       	movw	r12, r22
  b2:	7c 01       	movw	r14, r24
  b4:	e0 e4       	ldi	r30, 0x40	; 64
  b6:	ce 1a       	sub	r12, r30
  b8:	e2 e4       	ldi	r30, 0x42	; 66
  ba:	de 0a       	sbc	r13, r30
  bc:	ef e0       	ldi	r30, 0x0F	; 15
  be:	ee 0a       	sbc	r14, r30
  c0:	f1 08       	sbc	r15, r1
  c2:	e1 ec       	ldi	r30, 0xC1	; 193
  c4:	ce 16       	cp	r12, r30
  c6:	e1 ee       	ldi	r30, 0xE1	; 225
  c8:	de 06       	cpc	r13, r30
  ca:	e4 ee       	ldi	r30, 0xE4	; 228
  cc:	ee 06       	cpc	r14, r30
  ce:	f1 04       	cpc	r15, r1
  d0:	60 f5       	brcc	.+88     	; 0x12a <UART_enuInit+0x82>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SYSCLK;
    }
    else if (Copy_u32Baudrate > 2000000UL || Copy_u32Baudrate < 2400UL)
  d2:	69 01       	movw	r12, r18
  d4:	7a 01       	movw	r14, r20
  d6:	e0 e6       	ldi	r30, 0x60	; 96
  d8:	ce 1a       	sub	r12, r30
  da:	e9 e0       	ldi	r30, 0x09	; 9
  dc:	de 0a       	sbc	r13, r30
  de:	e1 08       	sbc	r14, r1
  e0:	f1 08       	sbc	r15, r1
  e2:	e1 e2       	ldi	r30, 0x21	; 33
  e4:	ce 16       	cp	r12, r30
  e6:	eb e7       	ldi	r30, 0x7B	; 123
  e8:	de 06       	cpc	r13, r30
  ea:	ee e1       	ldi	r30, 0x1E	; 30
  ec:	ee 06       	cpc	r14, r30
  ee:	f1 04       	cpc	r15, r1
  f0:	f0 f4       	brcc	.+60     	; 0x12e <UART_enuInit+0x86>
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;

        u32 UBRR = Copy_u32SysClk / 16UL / Copy_u32Baudrate - 1UL;
  f2:	68 94       	set
  f4:	13 f8       	bld	r1, 3
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	77 95       	ror	r23
  fc:	67 95       	ror	r22
  fe:	16 94       	lsr	r1
 100:	d1 f7       	brne	.-12     	; 0xf6 <UART_enuInit+0x4e>
 102:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__udivmodsi4>
 106:	ba 01       	movw	r22, r20
 108:	a9 01       	movw	r20, r18
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	51 09       	sbc	r21, r1
 10e:	61 09       	sbc	r22, r1
 110:	71 09       	sbc	r23, r1
        UBRRH = (u8)(UBRR >> 8);
 112:	bb 27       	eor	r27, r27
 114:	a7 2f       	mov	r26, r23
 116:	96 2f       	mov	r25, r22
 118:	85 2f       	mov	r24, r21
 11a:	80 bd       	out	0x20, r24	; 32
        UBRRL = (u8)(UBRR);
 11c:	49 b9       	out	0x09, r20	; 9
        /* Enable: Transmission and Reception */
        UCSRB = (1U << TXEN) | (1U << RXEN);
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	8a b9       	out	0x0a, r24	; 10
        /* Operation Mode: Asynchronous, Parity: None, Stop Bit: 1-bit */
        
        /* Character size: 8-bit */
        UCSRC = (1U << URSEL) | (1U << UCSZ1) | (1U << UCSZ0);
 122:	86 e8       	ldi	r24, 0x86	; 134
 124:	80 bd       	out	0x20, r24	; 32
    {
	    Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_BAUDRATE;
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	03 c0       	rjmp	.+6      	; 0x130 <UART_enuInit+0x88>
{
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;

    if (Copy_u32SysClk > 16000000UL || Copy_u32SysClk < 1000000UL)
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SYSCLK;
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	01 c0       	rjmp	.+2      	; 0x130 <UART_enuInit+0x88>
    }
    else if (Copy_u32Baudrate > 2000000UL || Copy_u32Baudrate < 2400UL)
    {
	    Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_BAUDRATE;
 12e:	85 e0       	ldi	r24, 0x05	; 5
        /* Character size: 8-bit */
        UCSRC = (1U << URSEL) | (1U << UCSZ1) | (1U << UCSZ0);
    }
    
    return Ret_enuErrorStatus;
}
 130:	ff 90       	pop	r15
 132:	ef 90       	pop	r14
 134:	df 90       	pop	r13
 136:	cf 90       	pop	r12
 138:	08 95       	ret

0000013a <UART_enuTransmit>:
 * @param[in] Copy_pu8Data Pointer to the buffer to be transmitted
 * @param[in] Copy_u16Size Size of the buffer
 * @return UART_enuErrStatus_t Error status of the function return
 */
UART_enuErrStatus_t UART_enuTransmit(const u8 *Copy_pu8Data, u16 Copy_u16Size)
{
 13a:	fc 01       	movw	r30, r24
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;
    u16 Loc_u16Counter = 0;

    if (NULL == Copy_pu8Data)
 13c:	89 2b       	or	r24, r25
 13e:	89 f0       	breq	.+34     	; 0x162 <UART_enuTransmit+0x28>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_NULL_PTR;
    }
    else if (Copy_u16Size == 0U)
 140:	61 15       	cp	r22, r1
 142:	71 05       	cpc	r23, r1
 144:	81 f0       	breq	.+32     	; 0x166 <UART_enuTransmit+0x2c>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	06 c0       	rjmp	.+12     	; 0x158 <UART_enuTransmit+0x1e>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;

        for (Loc_u16Counter = 0; Loc_u16Counter < Copy_u16Size; Loc_u16Counter++) {
            /* Wait until the transmit buffer is empty */
            while (!(UCSRA & (1 << UDRE)));
 14c:	5d 9b       	sbis	0x0b, 5	; 11
 14e:	fe cf       	rjmp	.-4      	; 0x14c <UART_enuTransmit+0x12>
            UDR = *Copy_pu8Data;
 150:	81 91       	ld	r24, Z+
 152:	8c b9       	out	0x0c, r24	; 12
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;

        for (Loc_u16Counter = 0; Loc_u16Counter < Copy_u16Size; Loc_u16Counter++) {
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	26 17       	cp	r18, r22
 15a:	37 07       	cpc	r19, r23
 15c:	b8 f3       	brcs	.-18     	; 0x14c <UART_enuTransmit+0x12>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SIZE;
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;
    u16 Loc_u16Counter = 0;

    if (NULL == Copy_pu8Data)
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_NULL_PTR;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	08 95       	ret
    }
    else if (Copy_u16Size == 0U)
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SIZE;
 166:	86 e0       	ldi	r24, 0x06	; 6
            Copy_pu8Data++;
        }
    }
    
    return Ret_enuErrorStatus;
}
 168:	08 95       	ret

0000016a <UART_enuReceive>:
 * @param[out] Copy_pu8Data Pointer to the buffer to be received
 * @param[in] Copy_u16Size Size of the buffer
 * @return UART_enuErrStatus_t Error status of the function return
 */
UART_enuErrStatus_t UART_enuReceive(u8* const Copy_pu8Data, u16 Copy_u16Size)
{
 16a:	ac 01       	movw	r20, r24
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;
    u16 Loc_u16Counter = 0;

    if (NULL == Copy_pu8Data)
 16c:	89 2b       	or	r24, r25
 16e:	a1 f0       	breq	.+40     	; 0x198 <UART_enuReceive+0x2e>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_NULL_PTR;
    }
    else if (Copy_u16Size == 0U)
 170:	61 15       	cp	r22, r1
 172:	71 05       	cpc	r23, r1
 174:	99 f0       	breq	.+38     	; 0x19c <UART_enuReceive+0x32>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	09 c0       	rjmp	.+18     	; 0x18e <UART_enuReceive+0x24>
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;

        for (Loc_u16Counter = 0; Loc_u16Counter < Copy_u16Size; Loc_u16Counter++)
        {
            /* Wait for data to be received */
            while (!(UCSRA & (1U << RXC)));
 17c:	5f 9b       	sbis	0x0b, 7	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <UART_enuReceive+0x12>
            Copy_pu8Data[Loc_u16Counter] = UDR;
 180:	fa 01       	movw	r30, r20
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	9c b1       	in	r25, 0x0c	; 12
 188:	90 83       	st	Z, r25
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;

        for (Loc_u16Counter = 0; Loc_u16Counter < Copy_u16Size; Loc_u16Counter++)
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	26 17       	cp	r18, r22
 190:	37 07       	cpc	r19, r23
 192:	a0 f3       	brcs	.-24     	; 0x17c <UART_enuReceive+0x12>
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SIZE;
    }
    else
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_OK;
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret
    UART_enuErrStatus_t Ret_enuErrorStatus = UART_enuERRSTATUS_NOK;
    u16 Loc_u16Counter = 0;

    if (NULL == Copy_pu8Data)
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_NULL_PTR;
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	08 95       	ret
    }
    else if (Copy_u16Size == 0U)
    {
        Ret_enuErrorStatus = UART_enuERRSTATUS_INVALID_SIZE;
 19c:	86 e0       	ldi	r24, 0x06	; 6
            Copy_pu8Data[Loc_u16Counter] = UDR;
        } 
    }
    
    return Ret_enuErrorStatus;
}
 19e:	08 95       	ret

000001a0 <__udivmodsi4>:
 1a0:	a1 e2       	ldi	r26, 0x21	; 33
 1a2:	1a 2e       	mov	r1, r26
 1a4:	aa 1b       	sub	r26, r26
 1a6:	bb 1b       	sub	r27, r27
 1a8:	fd 01       	movw	r30, r26
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <__udivmodsi4_ep>

000001ac <__udivmodsi4_loop>:
 1ac:	aa 1f       	adc	r26, r26
 1ae:	bb 1f       	adc	r27, r27
 1b0:	ee 1f       	adc	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	a2 17       	cp	r26, r18
 1b6:	b3 07       	cpc	r27, r19
 1b8:	e4 07       	cpc	r30, r20
 1ba:	f5 07       	cpc	r31, r21
 1bc:	20 f0       	brcs	.+8      	; 0x1c6 <__udivmodsi4_ep>
 1be:	a2 1b       	sub	r26, r18
 1c0:	b3 0b       	sbc	r27, r19
 1c2:	e4 0b       	sbc	r30, r20
 1c4:	f5 0b       	sbc	r31, r21

000001c6 <__udivmodsi4_ep>:
 1c6:	66 1f       	adc	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	1a 94       	dec	r1
 1d0:	69 f7       	brne	.-38     	; 0x1ac <__udivmodsi4_loop>
 1d2:	60 95       	com	r22
 1d4:	70 95       	com	r23
 1d6:	80 95       	com	r24
 1d8:	90 95       	com	r25
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
 1de:	bd 01       	movw	r22, r26
 1e0:	cf 01       	movw	r24, r30
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
